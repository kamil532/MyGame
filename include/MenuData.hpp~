#ifndef MENUDATA_HPP
#define MENUDATA_HPP
#include "Heders.hpp"
#include "Engine.hpp"

struct MenuItem{
public:  
  MenuItem( string& Text, const SDL_Rect& Rect ):
	    m_text(Text), m_rect(Rect) {}
	    
  void Draw(){ Engine::Get().GetWriter()->WriteString(m_text,m_rect); }	    
  void Draw(const SDL_Color& Color){
       Engine::Get().GetWriter()->WriteString(m_text,m_rect,Color);    
  }
  void Draw(const SDL_Color& Color,const SDL_Color& Background){
       Engine::Get().GetWriter()->WriteString(m_text,m_rect,Color,Background);    
  }  
  
public:   
  string m_text;
  SDL_Rect m_rect;
  SDL_Color* m_color;  
};

class MenuData{
public:
    MenuData();
    void NextItem();    
    void PrevItem();
    void Draw();
    void AddItem( MenuItem& Item );
    
    void SetResume();
       
    string GetValueCurrent() const { return m_current->m_text; }   
       
private:  
    SDL_Color m_color_active;
    SDL_Surface* m_background;
    SDL_Surface* m_title_surf;
    
    typedef list<MenuItem>::iterator l_item_it; 
    list<MenuItem> m_item;
    l_item_it m_current;  
    
    SpritePtr m_sprite_item;
    SDL_Rect m_sprite_rect;
};    
typedef boost::shared_ptr<MenuData> MenuDataPtr;

#endif